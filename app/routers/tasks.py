from typing import List
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
import uuid

from app.database import get_db
from app.dependencies import get_current_active_user, verify_task_access, verify_goal_access
from app.schemas import Task, TaskCreate, TaskUpdate, APIResponse
from app import crud, models

router = APIRouter(prefix="/tasks", tags=["tasks"])

@router.get("/{task_id}", response_model=Task)
async def get_task(
    task: models.Task = Depends(verify_task_access)
):
    """Get a specific task"""
    return task

@router.patch("/{task_id}", response_model=Task)
async def update_task(
    task_update: TaskUpdate,
    task: models.Task = Depends(verify_task_access),
    current_user: models.User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """Update a task (name, status, etc.)"""
    updated_task = crud.update_task(db, task.id, current_user.id, task_update)
    if not updated_task:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Task not found"
        )
    return updated_task

@router.delete("/{task_id}", response_model=APIResponse)
async def delete_task(
    task: models.Task = Depends(verify_task_access),
    current_user: models.User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """Delete a task"""
    success = crud.delete_task(db, task.id, current_user.id)
    if not success:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Task not found"
        )

    return APIResponse(
        success=True,
        message="Task deleted successfully"
    )

@router.post("/{task_id}/dependencies", response_model=APIResponse)
async def add_task_dependency(
    depends_on_task_id: str,
    task: models.Task = Depends(verify_task_access),
    current_user: models.User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """Add a dependency to a task"""
    try:
        depends_on_uuid = uuid.UUID(depends_on_task_id)
    except ValueError:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Invalid task ID format"
        )

    # Verify the dependency task exists and belongs to the same user
    depends_on_task = crud.get_task(db, depends_on_uuid, current_user.id)
    if not depends_on_task:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Dependency task not found"
        )

    # Check for circular dependency
    if crud.check_circular_dependency(db, task.id, depends_on_uuid):
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Adding this dependency would create a circular reference"
        )

    # Create the dependency
    dependency = crud.create_task_dependency(db, task.id, depends_on_uuid)

    return APIResponse(
        success=True,
        message="Dependency added successfully",
        data={"dependency_id": str(dependency.id)}
    )

@router.delete("/{task_id}/dependencies/{depends_on_task_id}", response_model=APIResponse)
async def remove_task_dependency(
    depends_on_task_id: str,
    task: models.Task = Depends(verify_task_access),
    current_user: models.User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """Remove a dependency from a task"""
    try:
        depends_on_uuid = uuid.UUID(depends_on_task_id)
    except ValueError:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Invalid task ID format"
        )

    success = crud.delete_task_dependency(db, task.id, depends_on_uuid)
    if not success:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Dependency not found"
        )

    return APIResponse(
        success=True,
        message="Dependency removed successfully"
    )

# Additional endpoint to create manual tasks (not generated by LLM)
@router.post("/", response_model=Task)
async def create_task(
    task_create: TaskCreate,
    goal_id: str,
    current_user: models.User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """Create a new task manually"""
    try:
        goal_uuid = uuid.UUID(goal_id)
    except ValueError:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Invalid goal ID format"
        )

    # Verify the goal exists and belongs to the user
    goal = crud.get_goal(db, goal_uuid, current_user.id)
    if not goal:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Goal not found"
        )

    # Create the task
    task = crud.create_task(db, task_create, goal_uuid)
    return task

@router.get("/goal/{goal_id}", response_model=List[Task])
async def get_goal_tasks(
    goal: models.Goal = Depends(verify_goal_access),
    db: Session = Depends(get_db),
    current_user: models.User = Depends(get_current_active_user)
):
    """Get all tasks for a specific goal"""
    tasks = crud.get_goal_tasks(db, goal.id, current_user.id)
    return tasks
